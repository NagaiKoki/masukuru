rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    function isAuthenticate() {
      return request.auth != null
    }
    
    function isUserAuthenticated(userId) {
      return request.auth.uid == userId
    }
     
    match /users/{document=**} {
      allow read: if isAuthenticate()
      allow create: if isAuthenticate()
      allow delete, update: if isAuthenticate() && request.auth.uid == resource.data.uid
    }
    
     match /records/{record} {
    	allow read, create : if isAuthenticate()
      allow delete, update: if isAuthenticate() && request.auth.uid == resource.data.uid
		}
    
    match /groups/{group} {
      allow read, write: if isAuthenticate()
      allow create
      allow update: if isAuthenticate() && request.auth.uid == resource.data.ownerId
      allow delete: if request.auth.uid == resource.data.owenerId
      
      match /groupUsers/{document} {
        allow read : if isAuthenticate()
        allow create : if isAuthenticate()
        allow delete, update: if isAuthenticate() && request.auth.uid == resource.data.uid
      }
    }
    
    match /{path=**}/groupUsers/{document} {
      allow read: if isAuthenticate()
      allow create: if isAuthenticate()
      // allow delete, update: if isAuthenticate() && request.auth.uid == resource.data.uid
      allow delete, update: if true
    }
    
    match /{path=**}/events/{event} {
      allow read, write: if isAuthenticate()
      
      match /menus/{document} {
        allow read: if isAuthenticate()
      	allow write: if isAutheticate()
      }
    }
    
    match /{path=**}/menus/{document} {
      allow read: if isAuthenticate()
      allow write: if true
    }
    
    match /{path=**}/comments/{document} {
      allow read: if isAuthenticate()
      allow write: if true
    }
    
    match /{path=**}/emoji/{document} {
      allow read: if isAuthenticate()
      allow write: if true
    }
    
    match /notifications/{notification} {
      allow read, write: if isAuthenticate()
    }
  }
}